name: "codeql-mobb-fixer-action"
description: "Mobb automatic vulnerability fixer action for GitHub CodeQL analysis"
branding:
  icon: aperture
  color: blue
inputs:
  mobb-api-token:
    description: "Mobb API token"
    required: true
  github-token:
    description: "GitHub token"
    required: true
outputs:
  fix-report-url:
    description: "Mobb fix report URL"
    value: ${{ steps.run-npx-mobb-dev.outputs.fix-report-url }}
runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v3.6.0
      with:
        node-version: 18
        
    # This step extracts the Head SHA and stores it in the 'head-sha' variable                
    - id: env 
      name: Set Up Environment
      run: |
        env

        # Show head_sha of the PR
        head_sha=${{ github.event.workflow_run.head_sha }}
        echo "head_sha=$head_sha"
        echo "head-sha=$head_sha" >> $GITHUB_OUTPUT
        RUN_PATH=$GITHUB_SERVER_URL"/"$GITHUB_REPOSITORY"/actions/runs/"$GITHUB_RUN_ID
        echo RUN_PATH: $RUN_PATH
        echo "action-run-path=$RUN_PATH" >> $GITHUB_OUTPUT

        #Getting the head-ref
        GITHUB_HEAD_REF=$(curl --header 'authorization: Bearer ${{ inputs.github-token }}' -s ${{github.event.issue.pull_request.url }} | jq -r '.head.ref')
        echo "github-head-ref=$GITHUB_HEAD_REF" >> $GITHUB_OUTPUT

      shell: bash -l {0}

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.env.outputs.github-head-ref }}


    # Displays status in the PR that this action is in 'pending' status
    - uses: guibranco/github-status-action-v2@v1.1.13
      with:
        authToken: ${{ inputs.github-token }}
        context: "Mobb Fix Analysis"
        state: "pending"
        target_url: ${{ steps.env.outputs.action-run-path }}
        sha: ${{steps.env.outputs.head-sha}}
        description: "Mobb fix analysis in progress..." 

    
        
    - id: run-codeql-generate-report
      name: CodeQL Generate Report
      run: |    
        # Check all available CodeQL analyses
        URL=$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/code-scanning/analyses
        echo "analyses list URL=$URL"
        response=$(curl -H "Authorization: Bearer ${{ inputs.github-token }}" $URL)
        echo length of code-scanning analyses list=$#{response}
        echo "analyses list: $response"
        # Extract all CodeQL Analyses IDs that has a matching head_sha to the PR
        echo "Extract all CodeQL Analyses IDs that has a matching head_sha to the PR"
        ids=$(echo "$response" | jq -r --arg sha "${{steps.env.outputs.head-sha}}" '.[] | select(.commit_sha == $sha) | .id')
        echo "Matching analyses ids=$ids"
        
        if [ -z "$ids" ]; then
          echo "Error: No matching IDs found for the given head SHA ${{steps.env.outputs.head-sha}}." >&2
          exit 1
        fi

        echo Initialize sarif_output.json with the base structure
        echo '{
          "runs": [],
          "version": "2.1.0"
        }' > sarif_output.json
        cat sarif_output.json
        
        # Loop through each ID
        for id in $ids; do
          echo "Found Analysis ID: $id"
        
          # Fetch the SARIF response
          sarif_response=$(curl -s -H "Authorization: Bearer ${{ inputs.github-token }}" -H "Accept: application/sarif+json" "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/code-scanning/analyses/$id")
          echo length of sarif_response=${#sarif_response}
          # echo sarif content:
          # echo $sarif_response | jq '.'

          # Save the response to a temporary file
          echo "$sarif_response" > current_sarif.json
          
          # Combine the current sarif_output.json with the new SARIF response
          jq -s '{"version": "2.1.0", "runs": (.[0].runs + .[1].runs)}' sarif_output.json current_sarif.json > temp_sarif_output.json
        
          # Move the temporary file to sarif_output.json
          mv temp_sarif_output.json sarif_output.json
          echo sarif_output.json size=$(stat -c%s sarif_output.json)
        done

        # Print directory
        ls -l

      shell: bash -l {0}
    - uses: actions/upload-artifact@v4
      with:
        # Name of the artifact to upload.
        # Optional. Default is 'artifact'
        name: CodeQL Sarif Report
        path: sarif_output.json

    - id: run-npx-mobb-dev
      name: Mobb - Generate Autofix
      run: |
      
        REPO=$(git remote get-url origin)
        REPO=${REPO%".git"}
        SCANNER=codeql
        PR_NUMBER=$(echo ${{github.event.workflow_run.head_branch}} | cut --delimiter='/' --fields=3 )
        # GITHUB_HEAD_REF=$(echo $PR_CONTEXT | jq -r '.[0].head.ref')
        GITHUB_HEAD_REF=${{ steps.env.outputs.github-head-ref }}
        COMMIT_HASH=$(git rev-parse $GITHUB_HEAD_REF)
        GITHUB_SHA=${{steps.env.outputs.head-sha}}
        echo "github.event.workflow_run.head_branch = "${{github.event.workflow_run.head_branch}}
        echo REPO: $REPO
        echo GITHUB_HEAD_REF: $GITHUB_HEAD_REF
        echo GITHUB_SHA: $GITHUB_SHA
        echo COMMIT_HASH: $COMMIT_HASH
        echo PR_NUMBER: $PR_NUMBER
        # npx mobbdev@latest add-scm-token --scm-type GitHub --url $REPO --token ${{ inputs.github-token }} --api-key ${{ inputs.mobb-api-token }} --username $GITHUB_ACTOR
        OUT=$(npx --yes mobbdev@latest review  -r $REPO --ref $GITHUB_HEAD_REF --ch $GITHUB_SHA --api-key ${{ inputs.mobb-api-token }} -f sarif_output.json  --pr $PR_NUMBER --github-token ${{ inputs.github-token }} --scanner $SCANNER -p .)
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
          exit $RETVAL
        fi
        OUT=$(echo $OUT | tr '\n' ' ')
        echo "fix-report-url=$OUT" >> $GITHUB_OUTPUT
        echo "Mobb URL: $OUT"

      shell: bash -l {0}
      env:
        PR_CONTEXT: ${{ toJson(github.event.workflow_run.pull_requests) }}
        
    # Publish the Mobb fix report link in the PR
    - uses: guibranco/github-status-action-v2@v1.1.13
      with:
        authToken: ${{ inputs.github-token }}
        context: "Mobb Fix Report Link"
        state: "success"
        target_url: ${{ steps.run-npx-mobb-dev.outputs.fix-report-url }}
        sha: ${{steps.env.outputs.head-sha}}
        description: "Click \"Details\" to access the full fix analysis report" 


    # Displays status in the PR that this action is in 'complete' status
    - uses: guibranco/github-status-action-v2@v1.1.13
      if: success()
      with:
        authToken: ${{ inputs.github-token }}
        context: "Mobb Fix Analysis"
        state: "success"
        target_url: ${{ steps.env.outputs.action-run-path }}
        sha: ${{steps.env.outputs.head-sha}}
        description: "Mobb fix analysis completed. See comment in the PR for results" 


    # Displays status in the PR that this action is in 'failure' status
    - uses: guibranco/github-status-action-v2@v1.1.13
      if: failure()
      with:
        authToken: ${{ inputs.github-token }}
        context: "Mobb Fix Analysis"
        state: "failure"
        target_url: ${{ steps.env.outputs.action-run-path }}
        sha: ${{steps.env.outputs.head-sha}}
        description: "Mobb fix analysis failed. Click \"Details\" to see console logs" 




