name: "cx-mobb-fixer-action"
description: "Mobb automatic vulnerability fixer action for Checkmarx One"
branding:
  icon: aperture
  color: blue
inputs:
  cx-tenant:
    description: "Your Checkmarx tenant name"
    required: true
  cx-api-token:
    description: "your Checkmarx credentials"
    required: true
  cx-base-uri:
    description: "your Checkmarx app url, e.g. \"https://ast.checkmarx.net/\""
    required: true
  cx-base-auth-uri:
    description: "your Checkmarx auth url, e.g. \"https://iam.checkmarx.net/\""
    required: true
  api-key:
    description: "Mobb API key"
    required: true
  github-token:
    description: "GitHub Token"
    required: true
outputs:
  fix-report-url:
    description: "Mobb fix report URL"
    value: ${{ steps.run-npx-mobb-dev.outputs.fix-report-url }}
runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v3.6.0
      with:
        node-version: 18

    # This step extracts the Head SHA and stores it in the 'head-sha' variable                
    - id: env 
        name: Set Up Environment
        run: |
          OUT=$(curl -s ${{github.event.issue.pull_request.url }} | jq -r '.head.sha')
          echo $OUT
          echo "head-sha=$OUT" >> $GITHUB_OUTPUT

    # Displays status in the PR that this action is in 'pending' status
    - uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: "Mobb fix analysis"
        state: "pending"
        sha: ${{steps.env.outputs.head-sha}}

    # Extract the scan ID from the Checkmarx comment and use it to generate a Checkmarx json report
    - name: Get Checkmarx Report
      run: |
        SCAN_ID=$(echo "$COMMENT" | sed -n 's/.*scans?id=\([^&]*\).*/\1/p')
        wget https://github.com/Checkmarx/ast-cli/releases/download/2.0.54/ast-cli_2.0.54_linux_x64.tar.gz -O checkmarx.tar.gz
        tar -xf checkmarx.tar.gz
        ./cx configure set --prop-name cx_apikey --prop-value ${{ secrets.CX_API_TOKEN }}
        ./cx configure set --prop-name cx_base_auth_uri --prop-value ${{ secrets.CX_BASE_AUTH_URI }}
        ./cx configure set --prop-name cx_base_uri --prop-value ${{ secrets.CX_BASE_URI }}
        ./cx configure set --prop-name cx_tenant --prop-value ${{ secrets.CX_TENANT }}
        ./cx results show --output-name report --report-format json --scan-id $SCAN_ID
      env:
        COMMENT: ${{ github.event.comment.body }}

    - id: run-npx-mobb-dev
      name: Mobb - Generate Autofix
      run: |
        REPO=$(git remote get-url origin)
        REPO=${REPO%".git"}
        GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
        SCANNER=checkmarx
        PR_NUMBER=${{ github.event.issue.number }}
        GITHUB_HEAD_REF=$(curl -s ${{github.event.issue.pull_request.url }} | jq -r '.head.ref')
        OUT=$(npx --yes mobbdev@latest review  -r $REPO --ref $GITHUB_HEAD_REF --ch $GITHUB_SHA --api-key ${{ secrets.MOBB_API_TOKEN }} -f report.json  --pr $PR_NUMBER --github-token ${{ secrets.GITHUB_TOKEN }} --scanner $SCANNER)
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
          exit $RETVAL
        fi
        OUT=$(echo $OUT | tr '\n' ' ')
        echo "fix-report-url=$OUT" >> $GITHUB_OUTPUT

    # Displays status in the PR that this action is in 'complete' status
    - uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: "Mobb fix analysis"
        state: "success"
        sha: ${{steps.env.outputs.head-sha}}
        
    # Publish the Mobb fix report link in the PR
    - uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: "Mobb fix report link"
        state: "success"
        target_url: ${{ steps.run-npx-mobb-dev.outputs.fix-report-url }}
        sha: ${{steps.env.outputs.head-sha}}
